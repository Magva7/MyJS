/*https://www.coursera.org/learn/html-css-javascript-for-web-developers/lecture/avyZO/lecture-41-part-2-defining-variables-function-and-scope*/
/*Вариант 1 - функция В вызывается внутри функции А, но инициализируется/опеределяется она снаружи, т.е. в
 глобальной области видимости*/

var x = 2;

var A = function() {
    var x = 5;
    B();
};

var B = function() {
    console.log(x);
};

A(); /* выведет 2, потому что логика следующая:
Мы вызываем функцию А, внутри нее переменная х заново инициализируется и ей присваивается значение = 5 (эта
 переменная х будет видна только внутри функции А.
 Потом мы в функции А вызываем функцию В. Дальше эта функция В выводит в консоль х, т.е. начинает смотреть,
  есть ли внутри самой функции В переменная х, т.е. определена ли эта переменная в ближайшей области видимости. У
   нас внутри функции В перемення х не определена, тогда JS интерпретатор начинает смотреть на область видимости
    выше и смотрит он не внутри функции А, а сразу в глобальной области видимости (т.к. у нас функция В изначально
     написана в глобальной области видимости, а внутри А мы функцию В только вызываем), в глобальной области видимости
      переменная х определена, там у нее значение 2 и поэтому в консоль выводится 2*/

/************************************************************************************************************/
/*Вариант 2 - функция В инициализируется/определяется и вызывается внутри функции А*/
var x = 2;

var A = function() {
    var x = 5;

    var B = function() {
        console.log(x);
    };

    B();
};



A(); /* выведет 5, потому что логика следующая:
Мы вызываем функцию А, внутри нее переменная х заново инициализируется и ей присваивается значение = 5 (эта
 переменная х будет видна только внутри функции А.
 Потом мы в функции А вызываем функцию В. Дальше эта функция В выводит в консоль х, т.е. начинает смотреть,
  есть ли внутри самой функции В переменная х, т.е. определена ли эта переменная в ближайшей области видимости. У
   нас внутри функции В перемення х не определена, тогда JS интерпретатор начинает смотреть на область видимости
    выше и смотрит внутрь функции А (т.к. у нас функция В написана внутри А), там у нее значение 5 и поэтому в
     консоль выводится 5*/